//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.12.07 at 03:19:27 PM EST 
//


package xPreparation.JAXBTests;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for NodeGraph complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="NodeGraph">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="Node" type="{}Node" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "NodeGraph", propOrder = {
    "node"
})
@XmlRootElement(name = "NodeGraph")
public class NodeGraph {

    @XmlElement(name = "Node", required = true)
    protected List<Node> node;

    /**
     * Gets the value of the node property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the node property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNode().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Node }
     * 
     * 
     */
    public List<Node> getNode() {
        if (node == null) {
            node = new ArrayList<Node>();
        }
        return this.node;
    }

    
    /**
     * Override equals.
     */
    public boolean equals(Object o) {
    	if(o instanceof NodeGraph) {
    		return equals((NodeGraph)o);
    	}
    	return false;
    }
    
    /**
     * Determines whether this NodeGraph is content equivalent with the one provided.
     * @param graph to compare against.
     * @return true if this NodeGraph is content equivalent to the one provided, false otherwise.
     */
    public boolean equals(NodeGraph graph) {
		List<Node> n1 = getNode();
    	List<Node> n2 = graph.getNode();

    	if(n1.size() != n2.size()) {
    		return false;
    	}
    	
    	// foreach node ensure that it exists in the provided object    	
    	for(int i = 0; i < n1.size(); ++i) {
    		if(!n1.get(i).equals(n2.get(i))) {
    			return false;
        	}        
    	}
    	return true;    	
    }
}
